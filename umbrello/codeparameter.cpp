
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*  This code generated by: 
 *      Author : thomas
 *      Date   : Fri Jun 20 2003
 */


#include <kdebug.h>
#include "codeparameter.h"

#include "classifiercodedocument.h"
#include "umlobject.h"

// Constructors/Destructors
//  

CodeParameter::CodeParameter ( ClassifierCodeDocument * parentDoc, UMLObject * parentObject )
    : QObject ( (QObject*) parentObject, "ACodeParam") 
{
	initFields( parentDoc, parentObject );
};

CodeParameter::~CodeParameter ( ) { };

//  
// Methods
//  


// Accessor methods
//  

/**
 * Utility method to get the value of parent object abstract value
 * @return the value of parent object abstrtact
 */
bool CodeParameter::getAbstract ( ) {
        return m_parentObject->getAbstract();
}

/**
 * Utility method to get the value of parent object static
 * Whether or not this is static.
 * @return the value of static 
 */
bool CodeParameter::getStatic ( ) {
        return m_parentObject->getStatic();
}

/**
 * Utility method to get the value of parent object name 
 * The name of this code parameter.
 * @return the value 
 */
QString CodeParameter::getName ( ) const {
	return m_parentObject->getName();
}

/**
 * Utility method to get the value of parent object type.
 * the typeName of this parameters (e.g. boolean, int, etc or perhaps Class name of
 * an object)
 * @return the value of type
 */
QString CodeParameter::getTypeName ( ) {
	UMLAttribute * at = (UMLAttribute*) m_parentObject;
	return at->getTypeName();
}

/**
 * Utility method to get the value of parent object scope. 
 * The visibility of this code parameter.
 * @return the value of parent object scope
 */
Uml::Scope CodeParameter::getVisibility ( ) const {
	return m_parentObject->getScope();
}

/**
 * Set the value of m_initialValue
 * The initial value of this code parameter
 * @param new_var the new value of m_initialValue
 */
void CodeParameter::setInitialValue ( QString new_var ) {
	m_initialValue = new_var;
}

/**
 * Get the value of m_initialValue
 * The initial value of this code parameter
 * @return the value of m_initialValue
 */
QString CodeParameter::getInitialValue ( ) {
	return m_initialValue;
}

/**
 * Set a Comment object.
 */
void CodeParameter::setComment ( CodeComment * object ) {
	m_comment = object;
}

/**
 * Get the Comment on this object.
 */
CodeComment * CodeParameter::getComment ( ) {
	return m_comment;
}


ClassifierCodeDocument * CodeParameter::getParentDocument ( ) {
        return m_parentDocument;
}

/**
 * Get the ParentObject object
 */
UMLObject * CodeParameter::getParentObject ( ) {
        return m_parentObject;
}

CodeGenerator * CodeParameter::getParentGenerator ( ) {
        return getParentDocument()->getParentGenerator();
}

// Other methods
//  

void CodeParameter::setAttributesOnNode ( QDomDocument & doc, QDomElement & blockElement)
{


        // set local attributes 
	blockElement.setAttribute("parent_id",getParentObject()->getID());
	blockElement.setAttribute("initialValue",getInitialValue());

        // a comment which we will store in its own separate child node block
        QDomElement commElement = doc.createElement( "header" );
        getComment()->saveToXMI(doc, commElement); // comment
        blockElement.appendChild( commElement);

}

/** set the class attributes of this object from
 * the passed element node.
 */
void CodeParameter::setAttributesFromNode ( QDomElement & root) {

        // set local attributes (none on superclass we need) 
	setInitialValue(root.attribute("initialValue",""));

        // load comment now
        // by looking for our particular child element
        QDomNode node = root.firstChild();
        QDomElement element = node.toElement();
        bool gotComment = false;
        while( !element.isNull() ) {
                QString tag = element.tagName();
                if( tag == "header" ) {
                        QDomNode cnode = element.firstChild();
                        QDomElement celem = cnode.toElement();
                        getComment()->loadFromXMI(celem);
                        gotComment = true;
                        break;
                }
                node = element.nextSibling();
                element = node.toElement();
        }

        if(!gotComment)
                kdWarning()<<" loadFromXMI : Warning: unable to initialize CodeComment in codeparam:"<<this<<endl;


// FIX: set parent object 
// dont forget disconnect too!
//        m_parentObject = root.attribute("parent_id","");
	// setText(getParentObject()->getDoc());

}

/**
 * create the string representation of this code parameter.
 * @return	QString
 */
void CodeParameter::syncToParent( ) {

	getComment()->setText(getParentObject()->getDoc());

        updateContent();
}

void CodeParameter::initFields ( ClassifierCodeDocument * doc, UMLObject * obj) {

	m_parentDocument = doc;
	m_parentObject = obj;
	m_initialValue = QString("");

	m_comment = m_parentDocument->newCodeComment();
	m_comment->setText(getParentObject()->getDoc());

	connect(m_parentObject,SIGNAL(modified()),this,SLOT(syncToParent()));
}


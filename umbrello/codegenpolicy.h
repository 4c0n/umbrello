
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*  This code generated by: 
 *      Author : thomas
 *      Date   : Mon Jun 16 2003
 */



#ifndef CODEGENPOLICY_H
#define CODEGENPOLICY_H

#include <qstring.h>
#include <qptrlist.h>


// #include "codegenpolicydialog.h"

/**
  * class CodeGenPolicy
  * This class describes the code generation policy for this project.
  */

class CodeGenPolicy
{
public:

	// Constructors/Destructors
	//  


	/**
	 * Empty Constructor
	 */
	CodeGenPolicy ( );

	/**
	 * Empty Destructor
	 */
	virtual ~CodeGenPolicy ( );

	// Public attributes
	//  

	// Policy of how to deal with overwriting existing files. Allowed values are "ask", "yes" and "no".
	QString m_overwritePolicy;

	// Whether or not verbose code commenting for sections is desired. If true, comments for sections will be written even if the section is empty.
	bool m_codeVerboseSectionComments;

	// Whether or not verbose code commenting for documentation is desired. If true, documentation for various code will be written even if no code would normally be created at that point in the file.
	bool m_codeVerboseDocumentComents;

	// location of the header file template.
	QString m_headerFile;

	QString m_lineEndingChars;


	// Public attribute accessor methods
		//  


	/**
	 * Set the value of m_overwritePolicy
	 * Policy of how to deal with overwriting existing files. Allowed values are "ask",
	 * "yes" and "no".
	 * @param new_var the new value of m_overwritePolicy
	 */
	void setOverwritePolicy ( QString new_var );

	/**
	 * Get the value of m_overwritePolicy
	 * Policy of how to deal with overwriting existing files. Allowed values are "ask",
	 * "yes" and "no".
	 * @return the value of m_overwritePolicy
	 */
	QString getOverwritePolicy ( );


	/**
	 * Set the value of m_codeVerboseSectionComments
	 * Whether or not verbose code commenting for sections is desired. If true, comments
	 * for sections will be written even if the section is empty. 
	 * @param new_var the new value of m_codeVerboseSectionComments
	 */
	void setCodeVerboseSectionComments ( bool new_var );

	/**
	 * Get the value of m_codeVerboseSectionComments
	 * Whether or not verbose code commenting for sections is desired. If true, comments
	 * for sections will be written even if the section is empty. 
	 * @return the value of m_codeVerboseSectionComments
	 */
	bool getCodeVerboseSectionComments ( );


	/**
	 * Set the value of m_codeVerboseDocumentComents
	 * Whether or not verbose code commenting for documentation is desired. If true,
	 * documentation for various code will be written even if no code would normally be
	 * created at that point in the file.
	 * @param new_var the new value of m_codeVerboseDocumentComents
	 */
	void setCodeVerboseDocumentComents ( bool new_var );

	/**
	 * Get the value of m_codeVerboseDocumentComents
	 * Whether or not verbose code commenting for documentation is desired. If true,
	 * documentation for various code will be written even if no code would normally be
	 * created at that point in the file.
	 * @return the value of m_codeVerboseDocumentComents
	 */
	bool getCodeVerboseDocumentComents ( );


	/**
	 * Set the value of m_headerFile
	 * location of the header file template.
	 * @param new_var the new value of m_headerFile
	 */
	void setHeaderFile ( QString new_var );

	/**
	 * Get the value of m_headerFile
	 * location of the header file template.
	 * @return the value of m_headerFile
	 */
	QString getHeaderFile ( );


	/**
	 * Set the value of m_lineEndingChars
	 * @param new_var the new value of m_lineEndingChars
	 */
	void setLineEndingChars ( QString new_var );

	/**
	 * Get the value of m_lineEndingChars
	 * @return the value of m_lineEndingChars
	 */
	QString getLineEndingChars ( );

	/**
	 * @return	CodeGenPolicyDialog
	 */
//	CodeGenPolicyDialog getDialog ( );


	/**
	 * @return	QString
	 */
	QString toXML ( );

protected:



	/**
	 */
	void init ( );

private:


	void initFields ( ) ;

};

#endif // CODEGENPOLICY_H


/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*  This code generated by: 
 *      Author : thomas
 *      Date   : Mon Jun 23 2003
 */



#ifndef JAVACLASSIFIERCODEDOCUMENT_H
#define JAVACLASSIFIERCODEDOCUMENT_H

#include <qstring.h>
#include "../classifiercodedocument.h"
#include "../classifier.h"
#include "../hierarchicalcodeblock.h"
#include "classifierinfo.h"
#include "javacodeclassfield.h"
#include "javacodeoperation.h"

class JavaCodeGenerator;
class JavaClassDeclarationBlock;
class JavaCodeGenerationPolicy;

/**
  * class JavaClassifierCodeDocument
  * A Java UMLClassifier Code Document.
  */

class JavaClassifierCodeDocument : public ClassifierCodeDocument
{
	Q_OBJECT
public:

	// Constructors/Destructors
	//  


	/**
	 * Constructor
	 */
	JavaClassifierCodeDocument (UMLClassifier * classifier , JavaCodeGenerator * parent);

	/**
	 * Empty Destructor
	 */
	virtual ~JavaClassifierCodeDocument ( );

	/**
	 * Get the dialog widget which allows user interaction with the object parameters.
	 * @return	CodeDocumentDialog
	 */
	//CodeDocumentDialog getDialog ( );

	QString scopeToJavaDecl(Uml::Scope scope); 
	QString capitalizeFirstLetter(QString string);

	// Make it easier on ourselves 
	JavaCodeGenerationPolicy * getJavaPolicy();

	QString getJavaClassName (QString name);

	QString getPath();

	/** add a code operation to this java classifier code document.
	 *  @return bool which is true IF the code operation was added successfully
	 */
	bool addCodeOperation (CodeOperation * op );

	/**
         * create a new CodeClassField declaration block object belonging to this CodeDocument.
	 */
	virtual CodeClassFieldDeclarationBlock * newDeclarationCodeBlock (CodeClassField * cf);

       /**
         * create a new CodeAccesorMethod object belonging to this CodeDocument.
         * @return      CodeAccessorMethod
         */
        virtual CodeAccessorMethod * newCodeAccessorMethod( CodeClassField *cf, CodeAccessorMethod::AccessorType type );

       /**
         * create a new CodeOperation object belonging to this CodeDocument.
         * @return      CodeOperation
         */
        virtual CodeOperation * newCodeOperation( UMLOperation * op );

       /**
         * Save the XMI representation of this object
         * @return      bool    status of save
         */
        virtual bool saveToXMI ( QDomDocument & doc, QDomElement & root );

        /**
         * load params from the appropriate XMI element node.
         */
        virtual void loadFromXMI ( QDomElement & root );

protected:

	/** create new code classfield for this document.
	 */
	virtual CodeClassField * newCodeClassField( UMLAttribute *at);
        virtual CodeClassField * newCodeClassField( UMLRole *role);

	/** set attributes of the node that represents this class
         * in the XMI document.
         */
        virtual void setAttributesOnNode ( QDomDocument & doc, QDomElement & blockElement);

        /** set the class attributes of this object from
         * the passed element node.
         */
        virtual void setAttributesFromNode ( QDomElement & element);

	void addOrUpdateCodeClassFieldMethodsInCodeBlock(QPtrList<CodeClassField> &list, JavaClassDeclarationBlock * codeBlock); 

	// add the declaration text blocks for various classfields
	void declareClassFields (QPtrList<CodeClassField> & list , HierarchicalCodeBlock * hCodeBlock ); 

	JavaClassDeclarationBlock * getClassDecl ( );
	bool forceDoc ();

	void updateContent();

private:

	HierarchicalCodeBlock * constructorBlock;
	HierarchicalCodeBlock * operationsBlock;

	ClassifierInfo * info;
	QString fileName; // Just for our convience in creating code
	QString endLine; // characters for ending line. Just for our convience in creating code
	QString JavaClassName;

	void init ( );


};

#endif // JAVACLASSIFIERCODEDOCUMENT_H

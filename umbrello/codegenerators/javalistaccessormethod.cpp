
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*  This code generated by: 
 *      Author : thomas
 *      Date   : Fri Jun 20 2003
 */

#include <kdebug.h>

#include "javalistaccessormethod.h"

#include "../attribute.h"
#include "../classifiercodedocument.h"
#include "../umlobject.h"
#include "../umlrole.h"

#include "javaclassifiercodedocument.h"
#include "javacodeclassfield.h"
#include "javacodedocumentation.h"

// Constructors/Destructors
//  

JavaListAccessorMethod::JavaListAccessorMethod ( JavaCodeClassField * field )
   : CodeAccessorMethod ( (CodeClassField*) field ) 
{
        updateMethodDeclaration();
	updateContent();
}

JavaListAccessorMethod::~JavaListAccessorMethod ( ) { }

// Other methods
//

/** Save the XMI representation of this object
 * @return      bool    status of save
 */
bool JavaListAccessorMethod::saveToXMI ( QDomDocument & doc, QDomElement & root ) {
        bool status = true;

        QDomElement blockElement = doc.createElement( "codeaccessormethod" );

        // set attributes
        setAttributesOnNode(doc, blockElement);

        root.appendChild( blockElement );

        return status;
}

void JavaListAccessorMethod::setAttributesOnNode ( QDomDocument & doc, QDomElement & blockElement)
{

        // set super-class attributes
        CodeAccessorMethod::setAttributesOnNode(doc, blockElement);

        // set local attributes now

}

/**
 * load params from the appropriate XMI element node.
 */
void JavaListAccessorMethod::loadFromXMI ( QDomElement & root )
{
        setAttributesFromNode(root);
}

void JavaListAccessorMethod::setAttributesFromNode( QDomElement & root)
{

        // set attributes from superclass method the XMI
        CodeAccessorMethod::setAttributesFromNode(root);

        // load local stuff

}

void JavaListAccessorMethod::updateContent ( )
{
	CodeClassField * parentField = getParentClassField();
	JavaCodeClassField * javafield = (JavaCodeClassField*)parentField;
        QString fieldName = javafield->getFieldName();

        setText("return (List) "+fieldName+";");
}

// we basically want to update the doc and start text of this method
void JavaListAccessorMethod::updateMethodDeclaration()
{

	CodeClassField * parentField = getParentClassField();
	ClassifierCodeDocument * doc = parentField->getParentDocument();

	// JavaClassifierCodeDocument * javadoc = dynamic_cast<JavaClassifierCodeDocument*>(doc);
	JavaClassifierCodeDocument * javadoc = (JavaClassifierCodeDocument*) doc;
	JavaCodeClassField * javafield = (JavaCodeClassField*)parentField;

        QString strVis = javadoc->scopeToJavaDecl(getParentClassField()->getVisibility());
        QString fieldName = javafield->getFieldName();
        QString fieldType = javafield->getTypeName();
        QString methodName = "get"+javadoc->capitalizeFirstLetter(fieldName);
	QString endLine = javadoc->getNewLineEndingChars();

        // get method
        JavaCodeDocumentation * header = new JavaCodeDocumentation(javadoc);
	if(!getParentObject()->getDoc().isEmpty())
		header->setText("Get the list of "+fieldName+endLine+getParentObject()->getDoc()+endLine+"@return the value of "+fieldName);
	setComment(header);

        setStartMethodText(strVis+" List "+methodName+" ( ) {");
        setEndMethodText("}");

	setOverallIndentationLevel(1);
}



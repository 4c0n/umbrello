
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/*  This code generated by: 
 *      Author : thomas
 *      Date   : Mon Jun 23 2003
 */

#ifndef CPPCODEGENERATIONPOLICY_H
#define CPPCODEGENERATIONPOLICY_H

#include <qstring.h>
#include "../codegenerationpolicy.h"

class KConfig;
class CodeGenerationPolicyPage;
class CPPCodeGenerator;

class CPPCodeGenerationPolicy : public CodeGenerationPolicy
{
	Q_OBJECT
public:

	enum CPPCommentStyle { SlashStar=0, DoubleSlash };

	static const CPPCommentStyle DEFAULT_COMMENT;
        static const bool DEFAULT_AUTO_GEN_EMPTY_CONSTRUCTORS;
        static const bool DEFAULT_AUTO_GEN_ACCESSORS;
	static const bool DEFAULT_INLINE_ACCESSORS;
        static const bool DEFAULT_INLINE_OPERATIONS;
 	static const bool DEFAULT_VIRTUAL_DESTRUCTORS;
	static const bool DEFAULT_PACKAGE_IS_NAMESPACE;

	// Constructors/Destructors
	//  

	/**
	 * Constructors 
	 */
	CPPCodeGenerationPolicy ( CPPCodeGenerator * parent, CodeGenerationPolicy * defaults = 0 );
	CPPCodeGenerationPolicy ( CPPCodeGenerator * parent, KConfig * config = 0 );

	/**
	 * Empty Destructor
	 */
	virtual ~CPPCodeGenerationPolicy ( );

	// Public attribute accessor methods
	//  

        /**
         * Set the value of m_inlineAccessors
         * @param new_var the new value
         */
        void setAccessorsAreInline ( bool var );

        /**
         * Get the value of m_inlineAccessors
         * @return value the boolean value of m_inlineAccessors
         */
        bool getAccessorsAreInline( );

        /**
         * Set the value of m_inlineOperations
         * @param new_var the new value
         */
        void setOperationsAreInline ( bool var );

        /**
         * Get the value of m_inlineOperations
         * @return value the boolean value of m_inlineOperations
         */
        bool getOperationsAreInline( );

       /**
         * Set the value of m_virtualDestructors
         * @param new_var the new value
         */
        void setDestructorsAreVirtual ( bool var );

        /**
         * Get the value of m_virtualDestructors
         * @return value the boolean value of m_virtualDestructors
         */
        bool getDestructorsAreVirtual( );

      /**
         * Set the value of m_packageIsNamespace
         * @param new_var the new value
         */
        void setPackageIsNamespace ( bool var );

        /**
         * Get the value of m_packageIsNamespace
         * @return value the boolean value of m_packageIsNamespace
         */
        bool getPackageIsNamespace( );


       /**
         * Set the value of m_autoGenerateAccessors
         * @param new_var the new value
         */
        void setAutoGenerateAccessors ( bool var );

       /**
         * Get the value of m_autoGenerateAccessors
         * @return value the boolean value of m_autoGenerateAccessors
         */
        bool getAutoGenerateAccessors( );

	/**
         * Set the value of m_autoGenerateConstructors
         * @param new_var the new value
         */
	void setAutoGenerateConstructors ( bool var ); 

       /**
         * Get the value of m_autoGenerateConstructors
         * @return value the boolean value of m_autoGenerateConstructors
         */
	bool getAutoGenerateConstructors ( );

	/**
	 * Set the value of m_commentStyle
	 * @param new_var the new value of m_commentStyle
	 */
	void setCommentStyle ( CPPCommentStyle new_var );

	/**
	 * Get the value of m_commentStyle
	 * @return the value of m_commentStyle
	 */
	CPPCommentStyle getCommentStyle ( );

        // a little utiltity method to call getParentGenerator()->getBuildMakefile()
        bool getBuildMakefile();

        // a little utility method so we can have our codegenerationpolicy page can change
        // the status of the building the Makefile document 
        void setBuildMakefile(bool buildIt);

        /**
         * set the defaults for this code generator from the passed generator.
         */
        virtual void setDefaults (CodeGenerationPolicy * defaults, bool emitUpdateSignal = true);

        /**
         * set the defaults from a config file for this code generator from the passed KConfig pointer.
         */
        virtual void setDefaults(KConfig * config, bool emitUpdateSignal = true);

	/**
         * write Default params to passed KConfig pointer.
         */
        virtual void writeConfig (KConfig * config);


	void loadFromXMI (QDomElement & element );

	/**
         * Create a new dialog interface for this object.
         * @return dialog object
         */
        CodeGenerationPolicyPage * createPage ( QWidget *parent = 0, const char * name = 0);

protected:

	/**
	 */
	void init ( );

private:

        CPPCodeGenerator * m_parentCodeGenerator;

	CPPCommentStyle m_commentStyle;
	bool m_autoGenerateConstructors;
        bool m_autoGenerateAccessors;

        bool m_inlineAccessors;
        bool m_inlineOperations;
        bool m_virtualDestructors;
        bool m_packageIsNamespace;

	QString stringClassName;
	QString vectorClassName;

	void initFields( CPPCodeGenerator * parent) ;

};

#endif // CPPCODEGENERATIONPOLICY_H
